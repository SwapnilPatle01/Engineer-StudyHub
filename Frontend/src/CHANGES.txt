# Engineers Library Component - Implementation Changes

## 1. Mock Data Integration

- **Added MOCK_DATA Constant**: Created a comprehensive mock data structure at the top of the file with sample educational resources including:
  - Universities list (RTMNU, MIT-WPU, COEP, VJTI Mumbai)
  - Branch hierarchies for each university
  - Semester options (1-8)
  - Subject lists by branch
  - Sample resources with various content types (notes, PYQs, videos, etc.)

- **Mock Data Toggle**: Implemented a toggle switch UI component that allows users to switch between mock data and API data:
  ```jsx
  <div className="flex items-center gap-2 bg-white px-4 py-2 rounded-md">
    <label className="text-gray-700 font-medium">Use Mock Data:</label>
    <div 
      className={`w-12 h-6 rounded-full p-1 cursor-pointer ${useMockData ? 'bg-green-500' : 'bg-gray-300'}`}
      onClick={() => setUseMockData(!useMockData)}
    >
      <div className={`bg-white w-4 h-4 rounded-full shadow-md transform transition-transform duration-300 ${useMockData ? 'translate-x-6' : ''}`} />
    </div>
    <span className="text-sm text-gray-600">{useMockData ? 'Enabled' : 'Disabled'}</span>
  </div>
  ```

## 2. Data Fetching Logic

- **Conditional Data Source**: Modified all data fetching functions to check the `useMockData` state before making API calls:
  - Added `useMockData` state variable initialized to `true` by default
  - Updated dependency arrays to include `useMockData` to trigger refetching when toggled
  - Implemented fallback to mock data on API errors

- **Enhanced Error Handling**: Improved error handling with detailed logging and graceful fallbacks:
  ```jsx
  try {
    // API call logic
  } catch (error) {
    console.error('Error fetching resources:', error);
    console.log('Falling back to mock data for resources');
    // Fallback logic using mock data
  }
  ```

## 3. UI Improvements

- **Tab Navigation**: Implemented horizontal scrollable tabs with overflow indicators:
  - Added left and right scroll buttons that appear when tabs overflow
  - Implemented smooth scrolling behavior with `scrollBy` method
  - Added visual indicators for active tabs with badges showing item counts

- **Responsive Design**: Enhanced mobile responsiveness:
  - Created a dropdown menu for tabs on mobile devices
  - Implemented grid layouts that adjust based on screen size

- **File Handling**: Added robust file handling utilities:
  - `getFileUrl()` function to properly format file URLs
  - `handleFileView()` with accessibility checks before opening files
  - `handleFileDownload()` for downloading resources

## 4. Content Organization

- **Tab Options Constant**: Created a `TAB_OPTIONS` constant to centralize tab configuration:
  ```jsx
  const TAB_OPTIONS = [
    { id: 'pyqs', label: 'PYQs', icon: 'archive' },
    { id: 'notes', label: 'Notes', icon: 'document' },
    // Additional tab options...
  ];
  ```

- **Content Filtering**: Implemented filtering logic for each content type:
  - Created separate filtered arrays for each content type (notes, PYQs, videos, etc.)
  - Added dynamic count badges that update based on filtered content

## 5. Animation and Transitions

- **Framer Motion Integration**: Used Framer Motion for smooth transitions:
  - Added `AnimatePresence` for tab content transitions
  - Implemented hover and tap animations for interactive elements
  - Created smooth tab indicator animations

## 6. Debug Features

- **Enhanced Logging**: Added comprehensive debug logging:
  ```jsx
  useEffect(() => {
    console.log('Selected University:', selectedUniversity);
    console.log('Selected Branch:', selectedBranch);
    // Additional logging...
  }, [selectedUniversity, selectedBranch, /* dependencies */]);
  ```

- **File Access Verification**: Added verification before opening files:
  ```jsx
  fetch(url, { method: 'HEAD' })
    .then(response => {
      if (response.ok) {
        console.log('File is accessible:', url);
        window.open(url, "_blank");
      } else {
        console.error('File is not accessible:', url, 'Status:', response.status);
        alert(`Cannot access file: ${url} (Status: ${response.status})`);
      }
    })
  ```

## 7. Empty State Handling

- Added a user-friendly empty state display when no content is available for the selected filters

## 8. Backend Integration

- **Configurable Backend URL**: Made file URLs configurable to work with the backend server:
  - Files are now requested from `http://localhost:5000/[path]`
  - Added proper error handling when files cannot be accessed

## 9. Card Components

- **Enhanced Card Design**: Implemented modern card designs for different content types:
  - Notes and PYQs cards with view/download options
  - Video cards with thumbnail and play button
  - Syllabus cards with topic tags
  - Question bank cards with metadata

## 10. Performance Optimizations

- **Conditional Rendering**: Improved performance by only rendering content when necessary
- **Memoized Filtering**: Implemented efficient filtering of resources based on selected criteria
- **Lazy Loading**: Content is only fetched when all required filters are selected 




## Current Issues 

- In Add Resource If i am not sending Anything it should Send Null but Right now it is Senidng Empty Strings 
Which is making it difficult to identitfy what is being Fetched 
- dashboard Is Receiving Proper Data but It is Not Rendering You can Check using Console log 
- Adding Resource Should reflect it then and there only but it is not Reflecting we need to Refresh it To See
- Add Resource is added still the popo of failed is showing 
